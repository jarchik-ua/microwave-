#define F_CPU 16000000UL
#include <inttypes.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/sleep.h>
#include <util/delay.h>
#define 	RED             1
#define 	YELLOW          2
#define 	GREEN           3
#define 	BLUE            4
#define 	OSCILLOSCOP     5
#define 	BUTTON          0
#define 	INDICATOR_PORT_PWM  	PORTC
#define 	INDICATOR_DDR_PWM  	DDRC
#define 	CHISLO  		PORTD
#define 	RAZRIAD  		PORTE

unsigned int razr1 = 0, razr2 = 0, razr3 = 0, razr4 = 0;
unsigned char bc547 = 1;
unsigned char encoder1 = 0, encoder2 = 0;
int encoder = 0;
int z = 0;
int led = 0;
int go[4] = { 246, 542, 685, 1023};
int arr_led[4] = {
		  0b00000011,
		  0b00000101,
		  0b00001001,
		  0b00010001
		 };
unsigned int chisla [10] = {
0x3f, 0x6, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x7, 0x7f, 0x6f
			   };

void
init_pwm (void);
 
void 
init_portb (void);
 
void
init_portc (void);
 
uint8_t
input_state (uint8_t pin);

void
vse_chislo (unsigned int razbivka_chisla);

void
init_timer(void);

void
start (void);

void
init_limit_switch(void);

ISR (TIMER0_OVF_vect)
{
   if (bc547 == 1) {RAZRIAD = 0b00000001; CHISLO = chisla[razr1];}
   if (bc547 == 2) {RAZRIAD = 0b00000010; CHISLO = chisla[razr2];}
   if (bc547 == 3) {RAZRIAD = 0b00000100; CHISLO = chisla[razr3];}
   if (bc547 == 4) {RAZRIAD = 0b00001000; CHISLO = chisla[razr4];}
   bc547++;
   if (bc547 > 4) bc547 = 1;
}

ISR (TIMER1_COMPA_vect)
{
   encoder--;
   if (encoder < 0) encoder = 0;
   if (encoder != 0)
      PORTF |= (1 << 0) | (1 << 1);     
   else
      PORTF &= ~((1 << 0) | (1 << 1));
}


void 
EEPROM_write(unsigned int address, unsigned char data)
{
   while(EECR & (1<<EEWE));
   EEAR = address;
   EEDR = data;
   EECR |= (1<<EEMWE);
   EECR |= (1<<EEWE);
}

unsigned char 
EEPROM_read(unsigned int address)
{
   while(EECR & (1<<EEWE));
   EEAR = address;
   EECR |= (1<<EERE);
   return EEDR;
}
 

int main()
{
   int button_state = 0;
   int button_state_prev = 0;
       
   init_pwm();
   init_portb();
   init_portc();
   init_timer();
   init_limit_switch();
    
   TCCR0 |= (1 << 2) | (1 << 1); 
   TCCR0 |= (1 << 0);
   TIMSK |= (1 << 0);
   TCNT0 = 0;
   sei();
    
   encoder1 = EEPROM_read(0x00);
   encoder2 = EEPROM_read(0x01);
   
   encoder = encoder1 * 100 + encoder2;
    
   while(1)
   {
      if (~PING & (1 << 0))
      {
	 OCR1A = go[z];
      
	 vse_chislo(encoder);
      
	 if (~PINA & (1 << 0))
	 {
	    encoder += 5;
	    _delay_ms(200);
	    if (encoder > 3600) encoder = 0;
	    encoder1 = encoder / 100;
	    encoder2 = encoder % 100;
	    cli();
	    EEPROM_write(0x00, encoder1);
	    EEPROM_write(0x01, encoder2);
	    sei();
	 }
	 if (~PINA & (1 << 1))
	 {
	    encoder -= 5;
	    _delay_ms(200);
	    
	    if (encoder < 0) encoder = 3600;
	    encoder1 = encoder / 100;
	    encoder2 = encoder % 100;
	    cli();
	    EEPROM_write(0x00, encoder1);
	    EEPROM_write(0x01, encoder2);
	    sei();
	 }
	 if (~PINA & (1 << 2))
	 {
	    if (encoder == 0) 
	       encoder = 30;    
	    else 
	       encoder += 30;    
	 
	    start();
	
	    while (~PINA & (1 << 2));
	    _delay_ms(200);
	 }
      
 
	 button_state = input_state(0);
	 INDICATOR_PORT_PWM = arr_led[led];
	 if ((button_state == 1) && (button_state_prev == 0))
	 {
	    z--;
	    if (z < 0) z = 3;
	    led--;
	    if (led < 0) led = 3;   
	 }
	 button_state_prev = button_state;
	 }
      else
      {
	 PORTF &= ~((1 << 0) | (1 << 1));
      }
	      
   }
   return 0;
 }
 
 
void
init_timer(void)
{
   DDRD = 0b11111111;
   DDRE = 0b00001111;
   
   DDRA &= ~((1 << 0) | (1 << 1) | (1 << 2)) ;
   PORTA |= (1 << 0) | (1 << 1)| (1 << 2);
   
   DDRF |= (1 << 0) | (1 << 1);
   PORTF &= ~((1 << 0) | (1 << 1));
}

void
vse_chislo (unsigned int razbivka_chisla)
{
   razr1 = razbivka_chisla / 1000;
   razr2 = razbivka_chisla % 1000 / 100;
   razr3 = razbivka_chisla % 100 / 10;
   razr4 = razbivka_chisla % 10;
}
 
uint8_t
input_state (uint8_t pin)
{
   uint8_t button_state;
   button_state = PINC & (1 << pin);
   if (button_state != 0)
      button_state = 1;
   else
      button_state = 0;
   return button_state;
}

void
start (void)
{
   TCCR3B &= ~(1 << CS31);
   TCCR3B |= (1 << CS32) | (1 << CS30); // delim na 1024 = 15625
   
   TIMSK |= (1 << OCIE1A); 
   OCR3BH = 0b00111101;
   OCR3BL = 0b00001001;
   TCNT1 = 0;
   
   TCCR3B |= (1 << WGM32);
}

void
init_portc (void)
{
   INDICATOR_DDR_PWM |= (1 << RED) | (1 << YELLOW) | (1 << GREEN) | (1 << BLUE);
   INDICATOR_PORT_PWM &= ~((1 << RED) | (1 << YELLOW) | (1 << GREEN) | (1 << BLUE));
    
   INDICATOR_DDR_PWM &= ~(1 << BUTTON);
   INDICATOR_PORT_PWM |= (1 << BUTTON);
}
 
void 
init_portb (void)
{    
   DDRB |= (1 << OSCILLOSCOP) ;
   PORTB &= ~(1 << OSCILLOSCOP);  
}
 
void
init_pwm (void)
{
   TCCR1A |= (1 << COM1A1); 
   TCCR1A &= ~(1 << COM1A0); 
    
   TCCR1A |= (1 << WGM10);
   TCCR1A |= (1 << WGM11);
    
   TCCR1B |= (1 << WGM12);
   TCCR1B &= ~(1 << WGM13);
    
 
   TCCR1B &= ~(1 << CS11);
   TCCR1B |= (1 << CS12) | (1 << CS10);  
}
 
void 
init_limit_switch (void)
{    
   DDRG &= ~(1 << 0);
   PORTG |= (1 << 0);  
}
